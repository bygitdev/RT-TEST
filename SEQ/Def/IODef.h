#ifndef	_IODEF_H_
#define	_IODEF_H_

// DIO Define
#define  DI_MODULE_CNT	13
#define  DO_MODULE_CNT	10
#define  DI_CH_CNT	(DI_MODULE_CNT * 2)
#define  DO_CH_CNT	(DO_MODULE_CNT * 2)

#define CH00	(0)
#define CH01	(100)
#define CH02	(200)
#define CH03	(300)
#define CH04	(400)
#define CH05	(500)
#define CH06	(600)
#define CH07	(700)
#define CH08	(800)
#define CH09	(900)
#define CH10	(1000)
#define CH11	(1100)
#define CH12	(1200)
#define CH13	(1300)
#define CH14	(1400)
#define CH15	(1500)
#define CH16	(1600)
#define CH17	(1700)
#define CH18	(1800)
#define CH19	(1900)
#define CH20	(2000)
#define CH21	(2100)
#define CH22	(2200)
#define CH23	(2300)
#define CH24	(2400)
#define CH25	(2500)
#define CH26	(2600)
#define CH27	(2700)
#define CH28	(2800)
#define CH29	(2900)
#define CH30	(3000)
#define CH31	(3100)

enum DIDef
{
	iTenkeyCol1					= (CH00 + 0),	//1, 4, 7, C
	iTenkeyCol2					= (CH00 + 1),	//2, 5, 8, 0
	iTenkeyCol3					= (CH00 + 2),	//3, 6, 9, S
	iTenkeyRow1					= (CH00 + 3),	//1, 2, 3
	iTenkeyRow2					= (CH00 + 4),	//4, 5, 6
	iTenkeyRow3					= (CH00 + 5),	//7, 8, 9
	iTenkeyRow4					= (CH00 + 6),	//C, 0, S
	iSpare0007					= (CH00 + 7),
	iBtnStartF					= (CH00 + 8),
	iBtnStopF					= (CH00 + 9),
	iBtnResetF					= (CH00 + 10),
	iSpare0011					= (CH00 + 11),
	iBtnToggleSelectModeF		= (CH00 + 12),
	iSpare0013					= (CH00 + 13),
	iSpare0014					= (CH00 + 14),
	iSpare0015					= (CH00 + 15),

	iBtnStartR					= (CH01 + 0),
	iBtnStopR					= (CH01 + 1),
	iBtnResetR					= (CH01 + 2),
	iSpare0103					= (CH01 + 3),
	iSpare0104					= (CH01 + 4),
	iSpare0105					= (CH01 + 5),
	iSpare0106					= (CH01 + 6),
	iSpare0107					= (CH01 + 7),
	iEmg01						= (CH01 + 8),
	iEmg02						= (CH01 + 9),
	iEmg03						= (CH01 + 10),
	iEmg04						= (CH01 + 11),
	iSpare0112					= (CH01 + 12),
	iSpare0113					= (CH01 + 13),
	iSpare0114					= (CH01 + 14),
	iEmgTenkey					= (CH01 + 15),

	iDoorClose01				= (CH02 + 0),
	iDoorClose02				= (CH02 + 1),
	iDoorClose03				= (CH02 + 2),
	iDoorClose04				= (CH02 + 3),
	iDoorClose05				= (CH02 + 4),
	iDoorClose06				= (CH02 + 5),
	iDoorClose07				= (CH02 + 6),
	iDoorClose08				= (CH02 + 7),
	iDoorClose09				= (CH02 + 8),
	iDoorClose10				= (CH02 + 9),
	iDoorClose11				= (CH02 + 10),
	iDoorClose12				= (CH02 + 11),
	iDoorClose13				= (CH02 + 12),
	iDoorClose14				= (CH02 + 13),
	iDoorClose15				= (CH02 + 14),
	iDoorClose16				= (CH02 + 15),

	iDoorClose17				= (CH03 + 0),
	iSpare0301					= (CH03 + 1), // 삭제
	iSpare0302					= (CH03 + 2), // 삭제
	iSpare0303					= (CH03 + 3), // 삭제
	iSpare0304					= (CH03 + 4), // 삭제
	iSpare0305					= (CH03 + 5), // 삭제
	iScrapBoxExist				= (CH03 + 6),
	iSpare0307					= (CH03 + 7),
	iSpare0308					= (CH03 + 8),
	iSpare0309					= (CH03 + 9),
	iSpare0310					= (CH03 + 10),
	iSpare0311					= (CH03 + 11),
	iSpare0312					= (CH03 + 12),
	iSpare0313					= (CH03 + 13),
	iSpare0314					= (CH03 + 14),
	iSpare0315					= (CH03 + 15),
	
	iDoorLock01					= (CH04 + 0),  
	iDoorLock02					= (CH04 + 1),  
	iDoorLock03					= (CH04 + 2),  
	iDoorLock04					= (CH04 + 3),
	iDoorLock05					= (CH04 + 4),
	iDoorLock06					= (CH04 + 5),
	iDoorLock07					= (CH04 + 6),
	iDoorLock08					= (CH04 + 7),
	iSpare0408					= (CH04 + 8), // 삭제
	iSpare0409					= (CH04 + 9),
	iIndexBitEjectBoxExist02	= (CH04 + 10),
	iIndexBitEjectBoxExist03	= (CH04 + 11),
	iIndexBitSupplyBoxExist02	= (CH04 + 12),
	iIndexBitSupplyBoxExist03	= (CH04 + 13),
	iIndexBitEjectCheck02		= (CH04 + 14),
	iIndexBitEjectCheck03		= (CH04 + 15),

	iFireMonitoring				= (CH05 + 0),
	iSafetyDoorReady			= (CH05 + 1),
	iSafetyDoorLockReady		= (CH05 + 2),
	iSafetyScrapBox				= (CH05 + 3),
	iSafetyLift					= (CH05 + 4),
	iSafetyLoader				= (CH05 + 5), // 사용안함
	iSpare0506					= (CH05 + 6),
	iSpare0507					= (CH05 + 7),
	iIndex02BitAlignExist01		= (CH05 + 8),
	iIndex02BitAlignExist02		= (CH05 + 9),
	iIndex03BitAlignExist01		= (CH05 + 10),
	iIndex03BitAlignExist02		= (CH05 + 11),
	iIndex02BitPressCheck01		= (CH05 + 12),
	iIndex02BitPressCheck02		= (CH05 + 13),
	iIndex03BitPressCheck01		= (CH05 + 14),
	iIndex03BitPressCheck02		= (CH05 + 15),

	iCylIndexDustShutterOpen01	= (CH06 + 0), 
	iCylIndexDustShutterClose01	= (CH06 + 1), 
	iCylIndexDustShutterOpen02	= (CH06 + 2), 
	iCylIndexDustShutterClose02	= (CH06 + 3), 
	iCylIndexDustShutterOpen03	= (CH06 + 4), 
	iCylIndexDustShutterClose03	= (CH06 + 5), 
	iCylIndexDustShutterOpen04	= (CH06 + 6), 
	iCylIndexDustShutterClose04	= (CH06 + 7), 
	iSpare0608					= (CH06 + 8), // 삭제
	iSpare0609					= (CH06 + 9),
	iSpare0610					= (CH06 + 10),
	iSpare0611					= (CH06 + 11),	
	iSpindleRunF_02				= (CH06 + 12),
	iSpindleOverloadF_02		= (CH06 + 13),
	iSpindleRunR_02				= (CH06 + 14),
	iSpindleOverloadR_02		= (CH06 + 15),

	iSpindleRunF_01				= (CH07 + 0),
	iSpindleOverloadF_01		= (CH07 + 1),
	iSpindleRunR_01				= (CH07 + 2),
	iSpindleOverloadR_01		= (CH07 + 3),
	iIonizerAlarm01				= (CH07 + 4), // B접점
	iIonizerCondition01			= (CH07 + 5),
	iIonizerIonLevel01			= (CH07 + 6),
	iIonizerAlarm02				= (CH07 + 7), // B접점
	iIonizerCondition02			= (CH07 + 8),
	iIonizerIonLevel02			= (CH07 + 9),
	iIonizerAlarm03				= (CH07 + 10), // B접점
	iIonizerCondition03			= (CH07 + 11),
	iIonizerIonLevel03			= (CH07 + 12),
	iIonizerAlarm04				= (CH07 + 13), // B접점
	iIonizerCondition04			= (CH07 + 14),
	iIonizerIonLevel04			= (CH07 + 15),

	iPowerOn					= (CH08 + 0),	
	iMainAir					= (CH08 + 1), // Air Pressure
	iSolRouterIonizer01			= (CH08 + 2), // Air Pressure
	iSolRouterIonizer02			= (CH08 + 3), // Air Pressure
	iSolRouterIonizer03			= (CH08 + 4), // Air Pressure
	iSolRouterIonizer04			= (CH08 + 5), // Air Pressure
	iVacOutPnp					= (CH08 + 6), // Air Pressure
	iMzClampPcbJam				= (CH08 + 7), // 추가
	iMzInConvExist				= (CH08 + 8),
	iSpare0809					= (CH08 + 9),
	iMzInStopperExist01			= (CH08 + 10),
	iMzInStopperExist02			= (CH08 + 11),
	iMzInStopperExist03			= (CH08 + 12),
	iSpare0813					= (CH08 + 13),
	iSpare0814					= (CH08 + 14),
	iCylMzInStopperUp01			= (CH08 + 15),

	iCylMzInStopperDw01			= (CH09 + 0),
	iCylMzInStopperUp02			= (CH09 + 1),
	iCylMzInStopperDw02			= (CH09 + 2),  
	iCylMzInStopperUp03			= (CH09 + 3), 
	iCylMzInStopperDw03			= (CH09 + 4),  
	iCylMzLoadStopperUp			= (CH09 + 5),
	iCylMzLoadStopperDw			= (CH09 + 6),
	iMzOutArrivalSpare			= (CH09 + 7),
	iMzOutArrival				= (CH09 + 8),
	iMzOutExist01				= (CH09 + 9),  
	iMzOutExist02				= (CH09 + 10),
	iMzOutExist03				= (CH09 + 11),
	iCylMzOutStopperFwd01		= (CH09 + 12), // Left 
	iCylMzOutStopperBwd01		= (CH09 + 13), 
	iCylMzOutStopperFwd02		= (CH09 + 14), // Right 
	iCylMzOutStopperBwd02		= (CH09 + 15),

	iMzLoadSW					= (CH10 + 0),
	iMzUnLoadSW					= (CH10 + 1),
	iSpare1002					= (CH10 + 2), // 삭제
	iSpare1003					= (CH10 + 3), // 삭제
	iMzLoadZExist				= (CH10 + 4),
	iMzLoadZArrival				= (CH10 + 5),
	iMzLoadZMid					= (CH10 + 6),
	iSpare1007					= (CH10 + 7),
	iMzClampLExist				= (CH10 + 8),
	iMzClampRExist				= (CH10 + 9),
	iMzPuhserOverload			= (CH10 + 10),
	iSpare1011					= (CH10 + 11),
	iCylMzClampOpen				= (CH10 + 12),
	iCylMzClampClose			= (CH10 + 13),
	iCylMzClampAlignFwd			= (CH10 + 14),
	iCylMzClampAlignBwd			= (CH10 + 15),

	iRailGripperExist			= (CH11 + 0),
	iRailExistStart				= (CH11 + 1),
	iRailExistMid1				= (CH11 + 2),
	iRailExistMid2				= (CH11 + 3),
	iRailExistEnd				= (CH11 + 4),
	iCylRailGripperOp			= (CH11 + 5),
	iCylRailGripperCl			= (CH11 + 6),
	iSpare1107					= (CH11 + 7),
	iInPnpExist01				= (CH11 + 8),
	iInPnpExist02				= (CH11 + 9),
	iInPnpKitExist				= (CH11 + 10),
	iSpare1111					= (CH11 + 11),
	iSpare1112					= (CH11 + 12),
	iSpare1113					= (CH11 + 13),
	iCylRailFwd					= (CH11 + 14),
	iCylRailBwd					= (CH11 + 15),

	iIndexBitEjectBoxExist01	= (CH12 + 0),
	iIndexBitEjectBoxExist04	= (CH12 + 1),
	iIndexBitSupplyBoxExist01	= (CH12 + 2),
	iIndexBitSupplyBoxExist04	= (CH12 + 3),
	iIndexBitEjectCheck01		= (CH12 + 4),
	iIndexBitEjectCheck04		= (CH12 + 5),
	iSpare1206					= (CH12 + 6),
	iSpare1207					= (CH12 + 7),
	iIndexStageKitExistL01		= (CH12 + 8),
	iIndexStageKitExistR01		= (CH12 + 9),
	iIndexStageKitExistL02		= (CH12 + 10),
	iIndexStageKitExistR02		= (CH12 + 11),
	iIndexStageKitExistL03		= (CH12 + 12),
	iIndexStageKitExistR03		= (CH12 + 13),
	iIndexStageKitExistL04		= (CH12 + 14),
	iIndexStageKitExistR04		= (CH12 + 15),

	iIndexMaskKitExist01		= (CH13 + 0),
	iIndexMaskKitExist02		= (CH13 + 1),
	iIndexMaskKitExist03		= (CH13 + 2),
	iIndexMaskKitExist04		= (CH13 + 3),
	iIndex01BitAlignExist01		= (CH13 + 4),
	iIndex01BitAlignExist02		= (CH13 + 5),
	iIndex04BitAlignExist01		= (CH13 + 6),
	iIndex04BitAlignExist02		= (CH13 + 7),
	iIndex01BitPressCheck01		= (CH13 + 8),
	iIndex01BitPressCheck02		= (CH13 + 9),
	iIndex04BitPressCheck01		= (CH13 + 10),
	iIndex04BitPressCheck02		= (CH13 + 11),
	iFrontBitColorRed			= (CH13 + 12),
	iFrontBitColorBlue			= (CH13 + 13),
	iRearBitColorRed			= (CH13 + 14),
	iRearBitColorBlue			= (CH13 + 15),

	iCylIndexMaskKitFixLFwd01	= (CH14 + 0),
	iCylIndexMaskKitFixLBwd01	= (CH14 + 1),
	iCylIndexMaskKitFixRFwd01	= (CH14 + 2),
	iCylIndexMaskKitFixRBwd01	= (CH14 + 3),
	iCylIndexMaskKitFixUp01		= (CH14 + 4),
	iCylIndexMaskKitFixDw01		= (CH14 + 5),
	iCylIndexMaskKitFixLFwd02	= (CH14 + 6),
	iCylIndexMaskKitFixLBwd02	= (CH14 + 7),
	iCylIndexMaskKitFixRFwd02	= (CH14 + 8),
	iCylIndexMaskKitFixRBwd02	= (CH14 + 9),
	iCylIndexMaskKitFixUp02		= (CH14 + 10),
	iCylIndexMaskKitFixDw02		= (CH14 + 11),
	iCylIndexMaskKitFixLFwd03	= (CH14 + 12),
	iCylIndexMaskKitFixLBwd03	= (CH14 + 13),
	iCylIndexMaskKitFixRFwd03	= (CH14 + 14),
	iCylIndexMaskKitFixRBwd03	= (CH14 + 15),

	iCylIndexMaskKitFixUp03		= (CH15 + 0),
	iCylIndexMaskKitFixDw03		= (CH15 + 1),
	iCylIndexMaskKitFixLFwd04	= (CH15 + 2),
	iCylIndexMaskKitFixLBwd04	= (CH15 + 3),
	iCylIndexMaskKitFixRFwd04	= (CH15 + 4),
	iCylIndexMaskKitFixRBwd04	= (CH15 + 5),
	iCylIndexMaskKitFixUp04		= (CH15 + 6),
	iCylIndexMaskKitFixDw04		= (CH15 + 7),
	iMaskPickerKitExist01		= (CH15 + 8),  
	iMaskPickerKitExist02		= (CH15 + 9),  
	iMaskPickerKitExist03		= (CH15 + 10), 
	iMaskPickerKitExist04		= (CH15 + 11), 
	iSpare1512					= (CH15 + 12),
	iSpare1513					= (CH15 + 13),
	iSpare1514					= (CH15 + 14),
	iSpare1515					= (CH15 + 15),

	iCylMaskPickerUp01			= (CH16 + 0),
	iCylMaskPickerDw01			= (CH16 + 1),
	iCylMaskPickerOp01			= (CH16 + 2),
	iCylMaskPickerCl01			= (CH16 + 3),
	iCylMaskPickerUp02			= (CH16 + 4),
	iCylMaskPickerDw02			= (CH16 + 5),
	iCylMaskPickerOp02			= (CH16 + 6),
	iCylMaskPickerCl02			= (CH16 + 7),
	iCylMaskPickerUp03			= (CH16 + 8),
	iCylMaskPickerDw03			= (CH16 + 9),
	iCylMaskPickerOp03			= (CH16 + 10),
	iCylMaskPickerCl03			= (CH16 + 11),
	iCylMaskPickerUp04			= (CH16 + 12),
	iCylMaskPickerDw04			= (CH16 + 13),
	iCylMaskPickerOp04			= (CH16 + 14),
	iCylMaskPickerCl04			= (CH16 + 15),

	iRouterBitBrokenCheck01		= (CH17 + 0),
	iRouterBitDownCheck01		= (CH17 + 1),
	iRouterBitBrokenCheck02		= (CH17 + 2),
	iRouterBitDownCheck02		= (CH17 + 3),
	iIndex01OutPnpKitExist01	= (CH17 + 4), // 추가
	iIndex01OutPnpKitExist02	= (CH17 + 5), // 추가 항상 감지되어 사용 안함
	iSpare1706					= (CH17 + 6),
	iSpare1707					= (CH17 + 7),
	iCylRouterBitClampUp01		= (CH17 + 8),
	iCylRouterBitClampDw01		= (CH17 + 9),
	iCylRouterBitClampOp01		= (CH17 + 10),
	iCylRouterBitClampCl01		= (CH17 + 11),
	iCylRouterBitClampUp02		= (CH17 + 12),
	iCylRouterBitClampDw02		= (CH17 + 13),
	iCylRouterBitClampOp02		= (CH17 + 14),
	iCylRouterBitClampCl02		= (CH17 + 15),

	iOutPnpScrapExist			= (CH18 + 0),
	iOutPnpKitExist01			= (CH18 + 1),
	iOutPnpKitExist02			= (CH18 + 2),
	iCylOutPnpScrapUp			= (CH18 + 3),
	iCylOutPnpScrapDw			= (CH18 + 4),
	iCylOutPnpScrapFixUpF		= (CH18 + 5),
	iCylOutPnpScrapFixDwF		= (CH18 + 6),
	iCylOutPnpScrapFixUpR		= (CH18 + 7),
	iCylOutPnpScrapFixDwR		= (CH18 + 8),
	iCylOutPnpScrapOpF			= (CH18 + 9),
	iCylOutPnpScrapClF			= (CH18 + 10),
	iCylOutPnpScrapOpR			= (CH18 + 11),
	iCylOutPnpScrapClR			= (CH18 + 12),
	iSpare1813					= (CH18 + 13),
	iSpare1814					= (CH18 + 14),
	iSpare1815					= (CH18 + 15),

	iAdcKitMzExistTop			= (CH19 + 0),
	iAdcKitMzExistBtm			= (CH19 + 1),
	iAdcKitGripperExist			= (CH19 + 2),
	iAdcKitJutExist				= (CH19 + 3),
	iAdcRailKitExist			= (CH19 + 4),
	iSpare1905					= (CH19 + 5),
	iSpare1906					= (CH19 + 6),
	iSpare1907					= (CH19 + 7),
	iSpare1908					= (CH19 + 8),
	iSpare1909					= (CH19 + 9),
	iSpare1910					= (CH19 + 10),
	iSpare1911					= (CH19 + 11),
	iSpare1912					= (CH19 + 12),
	iSpare1913					= (CH19 + 13),
	iSpare1914					= (CH19 + 14),
	iSpare1915					= (CH19 + 15),

	iViAutoRun					= (CH20 + 0),
	iViRouterPrsReadyF			= (CH20 + 1),
	iViRouterPrsBusyF			= (CH20 + 2),
	iViRouterPrsReadyR			= (CH20 + 3),
	iViRouterPrsBusyR			= (CH20 + 4),
	iViSpindleBtmReady			= (CH20 + 5),
	iViSpindleBtmBusy			= (CH20 + 6),
	iSpare2007					= (CH20 + 7),
	iSpare2008					= (CH20 + 8),
	iSpare2009					= (CH20 + 9),
	iSpare2010					= (CH20 + 10),
	iSpare2011					= (CH20 + 11),
	iSpare2012					= (CH20 + 12),
	iSpare2013					= (CH20 + 13),
	iSpare2014					= (CH20 + 14),
	iSpare2015					= (CH20 + 15),

	iSpare2100					= (CH21 + 0),
	iSpare2101					= (CH21 + 1),
	iSpare2102					= (CH21 + 2),
	iSpare2103					= (CH21 + 3),
	iSpare2104					= (CH21 + 4),
	iSpare2105					= (CH21 + 5),
	iSpare2106					= (CH21 + 6),
	iSpare2107					= (CH21 + 7),
	iSpare2108					= (CH21 + 8),
	iSpare2109					= (CH21 + 9),
	iSpare2110					= (CH21 + 10),
	iSpare2111					= (CH21 + 11),
	iSpare2112					= (CH21 + 12),
	iSpare2113					= (CH21 + 13),
	iSpare2114					= (CH21 + 14),
	iSpare2115					= (CH21 + 15),

	iMachineFan01				= (CH22 + 0),
	iMachineFan02				= (CH22 + 1),
	iMachineFan03				= (CH22 + 2),
	iMachineFan04				= (CH22 + 3),
	iMachineFan05				= (CH22 + 4),
	iMachineFan06				= (CH22 + 5),
	iMachineFan07				= (CH22 + 6),
	iMachineFan08				= (CH22 + 7),
	iMachineFan09				= (CH22 + 8),
	iMachineFan10				= (CH22 + 9),
	iSpare2210					= (CH22 + 10),
	iSpare2211					= (CH22 + 11),
	iSpare2212					= (CH22 + 12),
	iSpare2213					= (CH22 + 13),
	iSpare2214					= (CH22 + 14),
	iSpare2215					= (CH22 + 15),

	iSpare2300					= (CH23 + 0),
	iSpare2301					= (CH23 + 1),
	iSpare2302					= (CH23 + 2),
	iSpare2303					= (CH23 + 3),
	iSpare2304					= (CH23 + 4),
	iSpare2305					= (CH23 + 5),
	iSpare2306					= (CH23 + 6),
	iSpare2307					= (CH23 + 7),
	iSpare2308					= (CH23 + 8),
	iSpare2309					= (CH23 + 9),
	iSpare2310					= (CH23 + 10),
	iSpare2311					= (CH23 + 11),
	iSpare2312					= (CH23 + 12),
	iSpare2313					= (CH23 + 13),
	iSpare2314					= (CH23 + 14),
	iSpare2315					= (CH23 + 15),

	iSorterAutoRun				= (CH24 + 0),
	iSorterError				= (CH24 + 1),
	iSorterStageAllow01			= (CH24 + 2),
	iSorterStageSafety01		= (CH24 + 3),
	iSorterStageAllow02			= (CH24 + 4),
	iSorterStageSafety02		= (CH24 + 5),
	iSorterStageAllow03			= (CH24 + 6),
	iSorterStageSafety03		= (CH24 + 7),
	iSorterStageAllow04			= (CH24 + 8),
	iSorterStageSafety04		= (CH24 + 9),
	iSorterPickerAllow0102		= (CH24 + 10),
	iSorterPickerSafety0102		= (CH24 + 11),
	iSorterPickerAllow0304		= (CH24 + 12),
	iSorterPickerSafety0304		= (CH24 + 13),
	iSorterStageAllEmpty		= (CH24 + 14),
	ISorterLotEndBusy			= (CH24 + 15),

	iSorterLotEndComp			= (CH25 + 0), // Sorter Lot End 완료 및 all motor stop 상태
	iSorterAutoRecipeChgComp	= (CH25 + 1),
	iSorterSpare2502			= (CH25 + 2),
	iSorterSpare2503			= (CH25 + 3),
	iSorterSpare2504			= (CH25 + 4),
	iSorterSpare2505			= (CH25 + 5),
	iSorterSpare2506			= (CH25 + 6),
	iSorterSpare2507			= (CH25 + 7),
	iSorterSpare2508			= (CH25 + 8),
	iSorterSpare2509			= (CH25 + 9),
	iSorterSpare2510			= (CH25 + 10),
	iSorterSpare2511			= (CH25 + 11),
	iSorterSpare2512			= (CH25 + 12),
	iSorterSpare2513			= (CH25 + 13),
	iSorterSpare2514			= (CH25 + 14),
	iSorterSpare2515			= (CH25 + 15),
};

	

enum DODef
{
	oTenkeyLowA					= (CH00 + 0),
	oTenkeyLowB					= (CH00 + 1),
	oTenkeyLowC					= (CH00 + 2),
	oTenkeyLowD					= (CH00 + 3),
	oTenkeyHighA				= (CH00 + 4),
	oTenkeyHighB				= (CH00 + 5),
	oTenkeyHighC				= (CH00 + 6),
	oTenkeyHighD				= (CH00 + 7),
	oBtnLampStartF				= (CH00 + 8),
	oBtnLampStopF				= (CH00 + 9),
	oBtnLampResetF				= (CH00 + 10),
	oSpare0011					= (CH00 + 11),
	oSpare0012					= (CH00 + 12),
	oSpare0013					= (CH00 + 13),
	oSpare0014					= (CH00 + 14),
	oSpare0015					= (CH00 + 15),

	oBtnLampStartR				= (CH01 + 0),
	oBtnLampStopR				= (CH01 + 1),
	oBtnLampResetR				= (CH01 + 2),
	oSpare0103					= (CH01 + 3),
	oSpare0104					= (CH01 + 4),
	oSpare0105					= (CH01 + 5),
	oLight						= (CH01 + 6),
	oSiren						= (CH01 + 7),
	oTowerLampG					= (CH01 + 8),
	oTowerLampY					= (CH01 + 9),
	oTowerLampR					= (CH01 + 10),
	oSpare0111					= (CH01 + 11),
	oBuzzer01					= (CH01 + 12),
	oBuzzer02					= (CH01 + 13),
	oBuzzer03					= (CH01 + 14),
	oBuzzer04					= (CH01 + 15),

	oPwrMtMain01				= (CH02 + 0),
	oPwrMtMain02				= (CH02 + 1),
	oPwrMtIndexX01				= (CH02 + 2),
	oPwrMtIndexX02				= (CH02 + 3),
	oPwrMtIndexX03				= (CH02 + 4),
	oPwrMtIndexX04				= (CH02 + 5),
	oPwrMtIndexT0102			= (CH02 + 6),
	oPwrMtIndexT0304			= (CH02 + 7),
	oPwrMtRouterY01				= (CH02 + 8),
	oPwrMtRouterY02				= (CH02 + 9),
	oPwrMtRouterW0102			= (CH02 + 10),
	oPwrMtRouterZ0102			= (CH02 + 11),
	oPwrMtRouterZ0304			= (CH02 + 12),
	oPwrMtMgzLiftZ				= (CH02 + 13),
	oPwrMtPusherX_RailGripperX	= (CH02 + 14),
	oPwrMtLdY    				= (CH02 + 15),

	oPwrMtLdZ					= (CH03 + 0),
	oPwrMtOutPnpY				= (CH03 + 1),
	oPwrMtOutPnpZ				= (CH03 + 2),
	oPwrMtOutPnpX_InPnpClampY	= (CH03 + 3),
	oPwrMtInPnpY				= (CH03 + 4),
	oPwrMtInPnpZ_AdcZ_AdcX		= (CH03 + 5),
	oSpare0306					= (CH03 + 6),
	oSpare0307					= (CH03 + 7),
	oSpare0308					= (CH03 + 8),
	oSpare0309					= (CH03 + 9),
	oSpare0310					= (CH03 + 10),
	oSpare0311					= (CH03 + 11),
	oSpare0312					= (CH03 + 12),
	oSpare0313					= (CH03 + 13),
	oSpare0314					= (CH03 + 14),
	oSpare0315					= (CH03 + 15),

	oDoorLock01					= (CH04 + 0),
	oDoorLock02					= (CH04 + 1),
	oDoorLock03					= (CH04 + 2),
	oDoorLock04					= (CH04 + 3),
	oDoorLock05					= (CH04 + 4),
	oDoorLock06					= (CH04 + 5),  
	oDoorLock07					= (CH04 + 6),
	oDoorLock08					= (CH04 + 7),
	oSpare0408					= (CH04 + 8), // 삭제
	oSpare0409					= (CH04 + 9),
	oSpare0410					= (CH04 + 10),
	oSpare0411					= (CH04 + 11),
	oSpare0412					= (CH04 + 12),
	oSpare0413					= (CH04 + 13),
	oSpare0414					= (CH04 + 14),
	oBreakMgzLoadZ				= (CH04 + 15),

	oBreakLdZ					= (CH05 + 0),
	oBreakInPnpZ				= (CH05 + 1),
	oBreakRouterZ01				= (CH05 + 2),
	oBreakRouterZ02				= (CH05 + 3),
	oBreakRouterZ03				= (CH05 + 4),
	oBreakRouterZ04				= (CH05 + 5),
	oBreakOutPnpZ				= (CH05 + 6),
	oBreakAdcZ					= (CH05 + 7),
	oSpare0508					= (CH05 + 8),
	oSpare0509					= (CH05 + 9),
	oSpare0510					= (CH05 + 10),
	oSpare0511					= (CH05 + 11),
	oSpare0512					= (CH05 + 12),
	oSpare0513					= (CH05 + 13),
	oSpare0514					= (CH05 + 14),
	oSpare0515					= (CH05 + 15),

	oAcMgzInRun					= (CH06 + 0),
	oAcMgzOutRun				= (CH06 + 1),
	oAcMgzLoadRun				= (CH06 + 2),
	oAcMgzLoadDir				= (CH06 + 3),
	oSpare0604					= (CH06 + 4),
	oSpare0605					= (CH06 + 5),
	oSpare0606					= (CH06 + 6),
	oSpare0607					= (CH06 + 7),
	oPwrSpindleF				= (CH06 + 8),
	oPwrSpindleR				= (CH06 + 9),
	oPwrIonizer01				= (CH06 + 10),
	oPwrIonizer02				= (CH06 + 11),
	oPwrIonizer03				= (CH06 + 12),
	oPwrIonizer04				= (CH06 + 13),
	oSpindleReverseRun02		= (CH06 + 14),
	oSpindleReverseRun04		= (CH06 + 15),

	oSpindleRunF_01				= (CH07 + 0),
	oSpindleRstF_01				= (CH07 + 1),
	oSpindleVel02F_01			= (CH07 + 2),
	oSpindleVel01F_01			= (CH07 + 3),
	oSpindleRunR_01				= (CH07 + 4),
	oSpindleRstR_01				= (CH07 + 5),
	oSpindleVel02R_01			= (CH07 + 6),
	oSpindleVel01R_01			= (CH07 + 7),
	oSpindleRunF_02				= (CH07 + 8),
	oSpindleRstF_02				= (CH07 + 9),
	oSpindleVel02F_02			= (CH07 + 10),
	oSpindleVel01F_02			= (CH07 + 11),
	oSpindleRunR_02				= (CH07 + 12),
	oSpindleRstR_02				= (CH07 + 13),
	oSpindleVel02R_02			= (CH07 + 14),
	oSpindleVel01R_02			= (CH07 + 15),

	oMainAir					= (CH08 + 0),
	oSpare0801					= (CH08 + 1),
	oSpare0802					= (CH08 + 2),
	oSpare0803					= (CH08 + 3),
	oCylMzLoadStopperUp			= (CH08 + 4),
	oCylMzLoadStopperDw      	= (CH08 + 5),
	oCylMzOutStopperFwd01		= (CH08 + 6),
	oCylMzOutStopperFwd02		= (CH08 + 7),
	oCylMzClampOp				= (CH08 + 8),		
	oCylMzClampCl				= (CH08 + 9),		
	oCylMzClampAlignFwd			= (CH08 + 10),
	oCylRailGripperOp			= (CH08 + 11),
	oCylRailGripperCl			= (CH08 + 12),
	oSpare0813					= (CH08 + 13), 
	oMzOutSwLamp				= (CH08 + 14),
	oMzInSwLamp					= (CH08 + 15),

	oSolIndexKitOpen01			= (CH09 + 0), // 제로포인트
	oSolIndexKitOpen02			= (CH09 + 1), // 제로포인트
	oSolIndexKitOpen03			= (CH09 + 2), // 제로포인트
	oSolIndexKitOpen04			= (CH09 + 3), // 제로포인트
	oCylIndexDustShutterClose01	= (CH09 + 4),  
	oCylIndexDustShutterClose02	= (CH09 + 5),  
	oCylIndexDustShutterClose03	= (CH09 + 6),  
	oCylIndexDustShutterClose04	= (CH09 + 7),  
	oSpare0908					= (CH09 + 8), // oSolIndexStageAirBlow0102 사용안함 삭제
	oSpare0909					= (CH09 + 9), // oSolIndexStageAirBlow0304 사용안함 삭제  
	oCylMzInStopperUp01			= (CH09 + 10),  
	oCylMzInStopperDw01			= (CH09 + 11),
	oCylMzInStopperUp02			= (CH09 + 12),
	oCylMzInStopperDw02			= (CH09 + 13),
	oCylMzInStopperUp03			= (CH09 + 14),
	oCylMzInStopperDw03			= (CH09 + 15),

	oCylIndexMaskKitFixUp01		= (CH10 + 0),
	oCylIndexMaskKitFixUp02		= (CH10 + 1),  
	oCylIndexMaskKitFixUp03		= (CH10 + 2),
	oCylIndexMaskKitFixUp04		= (CH10 + 3),
	oCylIndexMaskKitFixFwd01	= (CH10 + 4),
	oCylIndexMaskKitFixFwd02	= (CH10 + 5),
	oCylIndexMaskKitFixFwd03	= (CH10 + 6),
	oCylIndexMaskKitFixFwd04	= (CH10 + 7),
	oCylMaskPickerUp01			= (CH10 + 8),
	oCylMaskPickerDw01			= (CH10 + 9),
	oCylMaskPickerUp02			= (CH10 + 10),
	oCylMaskPickerDw02			= (CH10 + 11),
	oCylMaskPickerUp03			= (CH10 + 12),
	oCylMaskPickerDw03			= (CH10 + 13),
	oCylMaskPickerUp04			= (CH10 + 14),
	oCylMaskPickerDw04			= (CH10 + 15),

	oCylMaskPickerOp01			= (CH11 + 0),
	oCylMaskPickerOp02			= (CH11 + 1),
	oCylMaskPickerOp03			= (CH11 + 2),
	oCylMaskPickerOp04			= (CH11 + 3),
	oSpare1104					= (CH11 + 4), // 삭제
	oSpare1105					= (CH11 + 5), // 삭제
	oSpare1106					= (CH11 + 6), // 삭제
	oSpare1107					= (CH11 + 7), // 삭제
	oSpare1108					= (CH11 + 8),
	oSpare1109					= (CH11 + 9),
	oSpare1110					= (CH11 + 10),
	oSpare1111					= (CH11 + 11),
	oSpare1112					= (CH11 + 12),
	oSpare1113					= (CH11 + 13),
	oCylRailFwd					= (CH11 + 14),
	oCylRailBwd					= (CH11 + 15),

	oCylRouterBitClampUp01		= (CH12 + 0),
	oCylRouterBitClampDw01		= (CH12 + 1),  
	oCylRouterBitClampUp02		= (CH12 + 2),
	oCylRouterBitClampDw02		= (CH12 + 3),
	oCylRouterBitClampOp01		= (CH12 + 4),
	oCylRouterBitClampOp02		= (CH12 + 5),
	oSolSpindleAirBlow0102		= (CH12 + 6),
	oSolSpindleAirBlow0304		= (CH12 + 7),
	oSolSpindleChuckOpen01		= (CH12 + 8),
	oSolSpindleChuckOpen02		= (CH12 + 9),
	oSolSpindleChuckOpen03		= (CH12 + 10),
	oSolSpindleChuckOpen04		= (CH12 + 11),
	oSolRouterIonizer01			= (CH12 + 12),
	oSolRouterIonizer02			= (CH12 + 13),
	oSolRouterIonizer03			= (CH12 + 14),
	oSolRouterIonizer04			= (CH12 + 15),

	oVacOutPnp					= (CH13 + 0),
	oVacOutPnpEject				= (CH13 + 1),
	oCylOutPnpScrapClampOp		= (CH13 + 2),
	oCylOutPnpScrapClampCl		= (CH13 + 3),
	oCylOutPnpScrapDw			= (CH13 + 4),
	oCylOutPnpScrapFixUp		= (CH13 + 5),
	oSolOutPnpKitOpen			= (CH13 + 6), // 제로포인트
	oSpare1307					= (CH13 + 7),
	oSpare1308					= (CH13 + 8),
	oSpare1309					= (CH13 + 9),
	oSpare1310					= (CH13 + 10),
	oSpare1311					= (CH13 + 11),
	oSpare1312					= (CH13 + 12),
	oSpare1313					= (CH13 + 13),
	oSpare1314					= (CH13 + 14),
	oSpare1315					= (CH13 + 15),

	oViAutorun					= (CH14 + 0), 
	oViRouterPrsTrigF			= (CH14 + 1),
	oViRouterPrsRstF			= (CH14 + 2),
	oViRouterPrsTrigR			= (CH14 + 3),
	oViRouterPrsRstR			= (CH14 + 4),
	oViSpindleBtmTrig			= (CH14 + 5),
	oViSpindleBtmRst			= (CH14 + 6),
	oViLiveModeRouterF			= (CH14 + 7),
	oViLiveModeRouterR			= (CH14 + 8), 
	oViTcpReconnect				= (CH14 + 9), 
	oSpare1410					= (CH14 + 10),
	oSpare1411					= (CH14 + 11),
	oSpare1412					= (CH14 + 12),
	oSpare1413					= (CH14 + 13),
	oSpare1414					= (CH14 + 14),
	oSpare1415					= (CH14 + 15),

	oSpare1500					= (CH15 + 0), 
	oSpare1501					= (CH15 + 1),
	oSpare1502					= (CH15 + 2), 
	oSpare1503					= (CH15 + 3),
	oSpare1504					= (CH15 + 4),
	oSpare1505					= (CH15 + 5),
	oSpare1506					= (CH15 + 6),
	oSpare1507					= (CH15 + 7),
	oSpare1508					= (CH15 + 8),
	oSpare1509					= (CH15 + 9),
	oSpare1510					= (CH15 + 10),
	oSpare1511					= (CH15 + 11),
	oSpare1512					= (CH15 + 12),
	oSpare1513					= (CH15 + 13),
	oSpare1514					= (CH15 + 14),
	oSpare1515					= (CH15 + 15),

	oSorterAutoRun				= (CH16 + 0),
	oSorterError				= (CH16 + 1),  
	oSorterStageReq01			= (CH16 + 2),
	oSorterStageBusy01			= (CH16 + 3),
	oSorterStageSafety01		= (CH16 + 4),
	oSorterStageReq02			= (CH16 + 5),
	oSorterStageBusy02			= (CH16 + 6),
	oSorterStageSafety02		= (CH16 + 7),
	oSorterStageReq03			= (CH16 + 8),
	oSorterStageBusy03			= (CH16 + 9),
	oSorterStageSafety03		= (CH16 + 10),
	oSorterStageReq04			= (CH16 + 11),
	oSorterStageBusy04			= (CH16 + 12),
	oSorterStageSafety04		= (CH16 + 13), 
	oSorterPickerReq			= (CH16 + 14), 
	oSorterPickerBusy			= (CH16 + 15),

	oSorterPickerSafety0102		= (CH17 + 0),
	oSorterPickerSafety0304		= (CH17 + 1),
	oSorterStageNoL				= (CH17 + 2),
	oSorterStageNoH				= (CH17 + 3),
	oSorterRouterAllEmpty		= (CH17 + 4),
	oSorterLotEnd				= (CH17 + 5),
	oSorterTcServer				= (CH17 + 6),
	oSorterRouterAdcMode		= (CH17 + 7), // Router가 Kit Change 중이라는 신호
	oSorterAutoRecipeChg		= (CH17 + 8), // Auto Recipe Chg Req
	oSorterSpare1709			= (CH17 + 9),
	oSorterSpare1710			= (CH17 + 10),
	oSorterSpare1711			= (CH17 + 11),
	oSorterSpare1712			= (CH17 + 12),
	oSorterSpare1713			= (CH17 + 13),
	oSorterSpare1714			= (CH17 + 14),
	oSorterSpare1715			= (CH17 + 15),

	oSpare1800					= (CH18 + 0),
	oSpare1801					= (CH18 + 1),  
	oSpare1802					= (CH18 + 2),
	oSpare1803					= (CH18 + 3),
	oSpare1804					= (CH18 + 4),
	oSpare1805					= (CH18 + 5),
	oSpare1806					= (CH18 + 6),
	oSpare1807					= (CH18 + 7),
	oSpare1808					= (CH18 + 8),
	oSpare1809					= (CH18 + 9),
	oSpare1810					= (CH18 + 10),
	oSpare1811					= (CH18 + 11),
	oSpare1812					= (CH18 + 12),
	oSpare1813					= (CH18 + 13),
	oSpare1814					= (CH18 + 14),
	oSpare1815					= (CH18 + 15),

	oSpare1900					= (CH19 + 0),
	oSpare1901					= (CH19 + 1), 
	oSpare1902					= (CH19 + 2), 
	oSpare1903					= (CH19 + 3), 
	oSpare1904					= (CH19 + 4),
	oSpare1905					= (CH19 + 5),
	oSpare1906					= (CH19 + 6),
	oSpare1907					= (CH19 + 7),
	oSpare1908					= (CH19 + 8),
	oSpare1909					= (CH19 + 9),
	oSpare1910					= (CH19 + 10),
	oSpare1911					= (CH19 + 11),
	oSpare1912					= (CH19 + 12),
	oSpare1913					= (CH19 + 13),
	oSpare1914					= (CH19 + 14),
	oSpare1915					= (CH19 + 15),
};


enum AIDef
{
	aiIonizer01			= 0,
	aiIonizer02			= 1,
	aiIonizer03			= 2,
	aiIonizer04			= 3,
	aiSpare04			= 4, // H/W 보드 단자대 불량으로 사용하면 안됨
	aiSpare05			= 5, // H/W 보드 단자대 불량으로 사용하면 안됨
	aiIndexAirFlow01	= 6,
	aiIndexAirFlow02	= 7,
	aiIndexAirFlow03	= 8,
	aiIndexAirFlow04	= 9,
	aiMainAir			= 10,
	aiSpare11			= 11,
	aiSpare12			= 12,
	aiSpare13			= 13,
	aiOutPnpRegAir		= 14, // Regulator
	aiOutPnpVacAir		= 15, 
};

enum enAOut
{
	aoOutPnpVacVolt		= 0, // Voltage
	Spare01				= 1,
	Spare02				= 2,
	Spare03				= 3,
	Spare04				= 4,
	Spare05				= 5,
	Spare06				= 6,
	Spare07				= 7,
};


#endif
